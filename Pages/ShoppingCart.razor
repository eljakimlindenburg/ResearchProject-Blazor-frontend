@page "/shoppingcart"

@using Blazor.Models
@inject Blazor.Extensions.Storage.Interfaces.ILocalStorage LocalStorage

<div class="container">
    <div class="row">
        <div class="col-sm-8 bg-light p-3">
            <div class="card" id="shoppingCartItems">
                <div class="card-body">
                    <h3 class="card-title text-secondary">My Bag</h3>
                </div>

                <div class="card-body">
                    <hr>
                </div>
                @if (cartStateProvider.ShoppingCart.Items == null)
                {
                    <p>Loading...</p>
                }
                else
                {

                    @foreach (var item in cartStateProvider.ShoppingCart.Items)
                    {

                        <div class="card-body">
                            <div class="float-left mr-3">
                                <img src="@item.Product.image_src" class="shoppingcart-item" alt="">
                            </div>
                            <div class="float-left">
                                <h3 class="card-price">EUR @item.Total</h3>
                                <h4 class="text-primary">@item.Product.Title.</h4>

                                <div class="Quantity">
                                    <p class="text-dark d-block"> @item.Quantity</p>
                                    <span class="d-block">
                                        <input type="number" min="1" step="1" class="form-control input-number" value="@item.Quantity" @onchange="@( async(eventArgs) => { item.Quantity = Convert.ToInt32(eventArgs.Value.ToString()); await ChangeQuantityLocalStorage();  } )" /> 
                                    </span>
                                </div>

                            </div>
                            <div class="float-right">
                                <button type="button" class="close" aria-label="Close" @onclick="@(() => RemoveItem(@item))">
                                    <span aria-hidden="true">&times;</span> 
                                </button>
                            </div>
                        </div>

                        <div class="card-body">
                            <hr>
                        </div>
                    }
                }
            </div>
            </div>

            <div class="col-sm-4 bg-light p-3">
                <div class="card">
                    <div class="card-body">
                        <h1 class="card-title text-secondary">Total</h1>
                    </div>

                    <div class="card-body">
                        <hr>
                    </div>
                    <div class="card-body">
                        <div class="container">
                            <div class="row">
                                <div class="col-sm-6">
                                    <h4 class="text-secondary">Total</h4>
                                </div>
                                <div class="col-sm-6">
                                    <p class="text-secondary">€@(cartStateProvider.ShoppingCart.Total)</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
</div>

@code {
    Product[] products;
    Cart cart;

    [CascadingParameter]
    CartStateProvider cartStateProvider { get; set; }

    [Parameter] public int CartProductQuantity { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> QuantityChanged { get; set; }




    protected override async Task OnInitializedAsync()
    {
        var varcart = await LocalStorage.GetItem<Cart>("MyShoppingCart");
        Console.WriteLine(varcart);
        cart = varcart;
    }

    async Task RemoveItem(CartProduct product)
    {
        cartStateProvider.ShoppingCart.Items.Remove(product);

        // Update the cart - save to localstorage
        await cartStateProvider.SaveChangesAsync();

    }

    private async Task ChangeQuantityLocalStorage()
    {

        //Update total 

        var total = cartStateProvider.ShoppingCart.Total;


        Console.WriteLine(total.ToString());
        foreach(var item in cartStateProvider.ShoppingCart.Items)
        {
            Console.WriteLine(item.Total);
        }
        

        await cartStateProvider.SaveChangesAsync();
    }

    async Task ChangeQuantity(CartProduct product ,int quantity)
    {
        var selectedItem = cartStateProvider.ShoppingCart.Items.Find(x => x.Product == product.Product);

        // update quantity
        if(selectedItem !=null ) selectedItem.Quantity = quantity;

        await cartStateProvider.SaveChangesAsync();

    }


}

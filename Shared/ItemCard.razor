@using Blazor.Models;

@inject Blazor.Extensions.Storage.Interfaces.ILocalStorage LocalStorage

<div class="card">
    <img src="@prod.image_src" alt="" class="card-img-top">
    <div class="card-body">
        <h3 class="card-title text-primary"><a href="/detailpage/@prod.id">@prod.Title</a></h3>
        <h4 class="card-price">@prod.Price</h4>
        <p class="card-text">@prod.Desc</p>

    </div>
    <div class="card-body bg-light border-top">

        <div class="float-left">
            <i class="far fa-star fa-sm"></i>
            <i class="far fa-star fa-sm"></i>
            <i class="far fa-star fa-sm"></i>
            <i class="far fa-star fa-sm"></i>
            <i class="far fa-star fa-sm"></i>
        </div>


        <div class="float-right">
            <button class="btn btn-secondary">
                <i class="far fa-heart fa-sm"></i>
            </button>

            <button class="btn btn-primary" @onclick="AddToBasket">
                <i class="fas fa-shopping-basket fa-sm"></i>
            </button>
        </div>

    </div>
</div>

@if (ShowPopUp)
{
    <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Modal body text goes here.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary">Save changes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

}

@if (ShowBackDrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [CascadingParameter] CartStateProvider CartStateProvider { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public int Price { get; set; }

    [Parameter]
    public string Image_url { get; set; }

    [Parameter]
    public Product prod { get; set; }

    public bool ShowPopUp = false;
    public string ModalClass = "";
    public string ModalDisplay = "none";
    public bool ShowBackDrop = false;

    async Task AddToBasket(MouseEventArgs e)
    {



        var item = new CartProduct
        {
            Product = prod,
            Quantity = Convert.ToInt32(1)
        };

        var items = CartStateProvider.ShoppingCart.Items;
        var itemInCart = items.FindIndex(x => x.Product.Equals(item.Product));

        Console.WriteLine("Is the item already in the cart?" + itemInCart.ToString());

        if (itemInCart >= 0)
        {
            CartStateProvider.ShoppingCart.Items[itemInCart].Quantity++;
        }
        else
        {
            CartStateProvider.ShoppingCart.Items.Add(item);
        }

        Console.WriteLine(CartStateProvider.ToString());

        ShowPopUp = await CartStateProvider.SaveChangesAsync();

        

        Console.WriteLine(ShowPopUp);

        OpenPopUp();

        await Task.Delay(2000);

        ShowPopUp = false;

        ClosePopUp();


    }

    public void OpenPopUp()
    {
        ModalClass = "show";
        ModalDisplay = "block";
        ShowBackDrop = true;
        StateHasChanged();
    }

    public void ClosePopUp()
    {
        ModalClass = "";
        ModalDisplay = "none";
        ShowBackDrop = false;
        StateHasChanged();
    }
}
